package frc.robot.subsystems;

import edu.wpi.first.wpilibj.Joystick;
//import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.controls.DutyCycleOut;
import com.ctre.phoenix6.hardware.TalonFX;
import com.ctre.phoenix6.signals.InvertedValue;
import com.ctre.phoenix6.signals.NeutralModeValue;


import frc.robot.interfaces.*;
//import frc.robot.RobotContainer;
//import frc.robot.Ports;


/**
 * The {@code Roller} class contains fields and methods pertaining to the function of the roller.
 */
public class RollerTest extends SubsystemBase implements IRoller{
	/**
	 * 
	 */
	static final double MAX_PCT_OUTPUT = 1.0;
	static final double ALMOST_MAX_PCT_OUTPUT = 1.0;
	static final double HALF_PCT_OUTPUT = 0.5;
	static final double REDUCED_PCT_OUTPUT = 0.85;
	//todo fix
	
	static final int WAIT_MS = 1000;
	static final int TIMEOUT_MS = 5000;

	static final int TALON_TIMEOUT_MS = 20;

	static final int ROLL_DISTANCE_INCHES = 13;
	static final int RELEASE_DISTANCE_INCHES = 17;
	static final int SHOOT_DISTANCE_INCHES = 17;
	
	TalonFX roller;
	TalonFX roller_follower; 

	TalonFXConfiguration rollerConfig;
	TalonFXConfiguration roller_followerConfig;

	Joystick joy;
		
	boolean isRolling;
	boolean isReleasing;
	boolean isShooting;

	DutyCycleOut rollerAlmostMaxOut = new DutyCycleOut(ALMOST_MAX_PCT_OUTPUT);
	DutyCycleOut rollerReducedOut = new DutyCycleOut(REDUCED_PCT_OUTPUT);
	DutyCycleOut rollerMaxOut = new DutyCycleOut(MAX_PCT_OUTPUT);
	DutyCycleOut rollerJOut = new DutyCycleOut(joy.getY());

	
		
	public RollerTest(TalonFX roller_in, TalonFX roller_follower_in) {
		
		roller = roller_in;
		roller_follower = roller_follower_in;

		rollerConfig = new TalonFXConfiguration();
		roller_followerConfig = new TalonFXConfiguration();

		roller.getConfigurator().apply(rollerConfig);
		roller_follower.getConfigurator().apply(roller_followerConfig);
		
		// Mode of operation during Neutral output may be set by using the setNeutralMode() function.
		// As of right now, there are two options when setting the neutral mode of a motor controller,
		// brake and coast.
		rollerConfig.MotorOutput.NeutralMode = NeutralModeValue.Coast;
		roller_followerConfig.MotorOutput.NeutralMode = NeutralModeValue.Coast;
		
		// Motor controller output direction can be set by calling the setInverted() function as seen below.
		// Note: Regardless of invert value, the LEDs will blink green when positive output is requested (by robot code or firmware closed loop).
		// Only the motor leads are inverted. This feature ensures that sensor phase and limit switches will properly match the LED pattern
		// (when LEDs are green => forward limit switch and soft limits are being checked).
		
		rollerConfig.MotorOutput.Inverted = InvertedValue.Clockwise_Positive;
		roller_followerConfig.MotorOutput.Inverted = InvertedValue.Clockwise_Positive;

		// Both the Talon SRX and Victor SPX have a follower feature that allows the motor controllers to mimic another motor controller's output.
		// Users will still need to set the motor controller's direction, and neutral mode.
		// The method follow() allows users to create a motor controller follower of not only the same model, but also other models
		// , talon to talon, victor to victor, talon to victor, and victor to talon.
		
		// set peak output to max in case if had been reduced previously
		//setNominalAndPeakOutputs(MAX_PCT_OUTPUT);
	}
	
	/*@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		setDefaultCommand(new RollerStop());
	}*/

	@Override
	public void periodic() {
		// Put code here to be run every loop

	}

	public void roll() {
		//SwitchedCamera.setUsbCamera(Ports.UsbCamera.GRASPER_CAMERA);

	
		roller.setControl(rollerReducedOut);
		
		isRolling = true;
		isReleasing = false;
		isShooting = false;
	}
	
	public void release() {
		//SwitchedCamera.setUsbCamera(Ports.UsbCamera.GRASPER_CAMERA);

		//roller.set(ControlMode.PercentOutput, -ALMOST_MAX_PCT_OUTPUT);
		roller.setControl(rollerAlmostMaxOut);
		
		isReleasing = true;
		isRolling = false;
		isShooting = false;
	}

	public void shoot() {
		//SwitchedCamera.setUsbCamera(Ports.UsbCamera.GRASPER_CAMERA);


		roller.setControl(rollerMaxOut);
		
		isRolling = true;
		isReleasing = false;
		isShooting = false;
	}
	
	
	public void stop() {
	
		roller.setControl(rollerMaxOut);
		
		isRolling = false;
		isReleasing = false;
		isShooting = false;
	}
	
		
	// NOTE THAT THIS METHOD WILL IMPACT BOTH OPEN AND CLOSED LOOP MODES
	public void setNominalAndPeakOutputs(double peakOutput)
	{
		/*roller.configPeakOutputForward(peakOutput, TALON_TIMEOUT_MS);
		roller.configPeakOutputReverse(-peakOutput, TALON_TIMEOUT_MS);

		roller.configNominalOutputForward(0, TALON_TIMEOUT_MS);
		roller.configNominalOutputReverse(0, TALON_TIMEOUT_MS);*/
	}
	
	public boolean isRolling(){
		return isRolling;
	}
	
	public boolean isReleasing(){
		return isReleasing;
	}

	public boolean isShooting(){
		return isShooting;
	}

	// for debug purpose only
	public void joystickControl(Joystick joystick)
	{
		//roller.set(ControlMode.PercentOutput, joystick.getY());
		roller.setControl(rollerJOut);
	}

	
}










